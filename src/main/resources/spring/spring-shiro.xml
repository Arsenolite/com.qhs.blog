<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!--分析业务需求：-->
    <!--某些API需要用户登陆-->
    <!--某些API需要获取用户ID-->
    <!--登陆API需要通过网页验证码验证-->
    <!--修改密码/注册用户API需要通过邮件+网页验证码验证-->
    <!--因此需要4个过滤器验证是否完成网页/邮件验证码验证，以及验证是否登陆，以及是否有管理员权限-->

    <bean id="mailFilter" class="com.qhs.blog.util.shiro.filter.mailFilter"/>
    <bean id="captchaFilter" class="com.qhs.blog.util.shiro.filter.captchaFilter"/>
    <bean id="adminFilter" class="com.qhs.blog.util.shiro.filter.adminFilter"/>
    <bean id="userFilter" class="com.qhs.blog.util.shiro.filter.userFilter"/>

    <!--要接触数据库的Realm则只需要两个-->
    <bean id="adminRealm" class="com.qhs.blog.util.shiro.realm.adminRealm">
        <property name="cachingEnabled" value="false"/>
    </bean>
    <bean id="userRealm" class="com.qhs.blog.util.shiro.realm.userRealm">
        <property name="cachingEnabled" value="false"/>
    </bean>

    <!--
    filterChainDefinitions参数说明,注意其验证顺序是自上而下
    =================================================================================================
    anon        org.apache.shiro.web.filter.authc.AnonymousFilter
    authc       org.apache.shiro.web.filter.authc.FormAuthenticationFilter
    authcBasic  org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
    perms       org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
    port        org.apache.shiro.web.filter.authz.PortFilter
    rest        org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
    roles       org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
    ssl         org.apache.shiro.web.filter.authz.SslFilter
    user        org.apache.shiro.web.filter.authc.UserFilter

    =================================================================================================
    anon: 例子/admins/**=anon 没有参数，表示可以匿名使用。
    authc: 例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
    roles： 例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，
                    并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],
                    每个参数通过才算通过，相当于hasAllRoles()方法。
    perms： 例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
                    例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，
                    想当于isPermitedAll()方法。
    rest：  例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,
                   其中method为post，get，delete等。
    port：  例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,
                   其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
    authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
    ssl:  例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
    user: 例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
    注：anon，authcBasic，auchc，user是认证过滤器，
    perms，roles，ssl，rest，port是授权过滤器
    =================================================================================================
    -->

    <!-- shiroFilter工厂 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 构建securityManager环境 -->
        <property name="securityManager" ref="securityManager"/>
        <property name="filters">
            <util:map>
                <entry key="mail" value-ref="mailFilter"/>
                <entry key="captcha" value-ref="captchaFilter"/>
                <entry key="admin" value-ref="adminFilter"/>
                <entry key="user" value-ref="userFilter"/>
            </util:map>
        </property>
        <!-- 设计哪些URL用哪个过滤器 -->
        <!--由于具体用户权限还没细化成接口，先定义两个验证码的过滤器-->
        <property name="filterChainDefinitions">
            <value>
                /api/captcha/** = noSessionCreation,anon
                /api/mail/** = noSessionCreation,captcha
            </value>
        </property>
    </bean>


    <!-- Subject工厂，写一个禁用会话的subjectFactory -->
    <bean id="subjectFactory" class="com.qhs.blog.util.shiro.StatelessDefaultSubjectFactory"/>

    <!-- 禁用掉会话调度器 -->
    <bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
        <property name="sessionValidationSchedulerEnabled" value="false"/>
    </bean>


    <!--解决报错，组装默认的subjectDAO-->
    <bean id="subjectDAO" class="org.apache.shiro.mgt.DefaultSubjectDAO">
        <property name="sessionStorageEvaluator" ref="sessionStorageEvaluator"/>
    </bean>

    <bean id="sessionStorageEvaluator" class="org.apache.shiro.mgt.DefaultSessionStorageEvaluator">
        <property name="sessionStorageEnabled" value="false"/>
    </bean>


    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="subjectDAO" ref="subjectDAO"/>
        <property name="subjectFactory" ref="subjectFactory"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>


</beans>